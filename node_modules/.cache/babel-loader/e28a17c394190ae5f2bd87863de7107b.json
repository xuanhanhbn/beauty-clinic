{"ast":null,"code":"var _jsxFileName = \"/Users/leo/Documents/GitHub/demo-beauty/training-react-template/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { createTheme, CssBaseline, ThemeProvider } from \"@mui/material\";\nimport { getDesignTokens } from \"lib/themes\";\nimport { renderRoutes } from \"react-router-config\";\nimport { SnackbarProvider } from \"notistack\";\nimport routes from \"routes\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { ThemeProvider as ThemeProviderLegacy } from \"@mui/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst history = createBrowserHistory();\n\nfunction App() {\n  _s();\n\n  const mode = useSelector(state => state.Web.mode); // const dispatch = useDispatch();\n  // // Get mode from cookie in the first access page\n  // useEffect(() => {\n  //   const currentBrowserTheme =\n  //     window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\")\n  //       ? \"dark\"\n  //       : \"light\";\n  //   dispatch(\n  //     Actions.Web.update({\n  //       key: \"mode\",\n  //       value:\n  //         cookie.parse(document?.cookie)?.mode?.toString() ||\n  //         currentBrowserTheme,\n  //     })\n  //   );\n  // }, []);\n  // Update the theme only if the mode changes\n\n  const theme = React.useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(ThemeProviderLegacy, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(SnackbarProvider, {\n        maxSnack: 3,\n        children: /*#__PURE__*/_jsxDEV(Router, {\n          history: history,\n          children: renderRoutes(routes)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xXd43IjJHFNaoHMs+Uueog4b4GY=\", false, function () {\n  return [useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useSelector","createTheme","CssBaseline","ThemeProvider","getDesignTokens","renderRoutes","SnackbarProvider","routes","Router","createBrowserHistory","ThemeProviderLegacy","history","App","mode","state","Web","theme","useMemo"],"sources":["/Users/leo/Documents/GitHub/demo-beauty/training-react-template/src/App.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Actions } from \"./store\";\nimport { createTheme, CssBaseline ,ThemeProvider} from \"@mui/material\";\nimport { getDesignTokens } from \"lib/themes\";\nimport { renderRoutes } from \"react-router-config\";\nimport { SnackbarProvider } from \"notistack\";\nimport { RootState } from \"store/reducers\";\nimport cookie from \"cookie\";\nimport routes from \"routes\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { ThemeProvider as ThemeProviderLegacy} from \"@mui/styles\";\n\nconst history: any = createBrowserHistory();\n\nfunction App() {\n  const mode = useSelector((state: RootState) => state.Web.mode);\n  // const dispatch = useDispatch();\n\n  // // Get mode from cookie in the first access page\n  // useEffect(() => {\n  //   const currentBrowserTheme =\n  //     window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\")\n  //       ? \"dark\"\n  //       : \"light\";\n  //   dispatch(\n  //     Actions.Web.update({\n  //       key: \"mode\",\n  //       value:\n  //         cookie.parse(document?.cookie)?.mode?.toString() ||\n  //         currentBrowserTheme,\n  //     })\n  //   );\n  // }, []);\n  // Update the theme only if the mode changes\n  const theme = React.useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\n  return (\n    <ThemeProvider theme={theme}>\n      <ThemeProviderLegacy theme={theme}>\n      <CssBaseline />\n      <SnackbarProvider maxSnack={3}>\n        <Router history={history}>{renderRoutes(routes)}</Router>\n      </SnackbarProvider>\n      </ThemeProviderLegacy >\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,SAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,aAAnC,QAAuD,eAAvD;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,gBAAT,QAAiC,WAAjC;AAGA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASN,aAAa,IAAIO,mBAA1B,QAAoD,aAApD;;AAEA,MAAMC,OAAY,GAAGF,oBAAoB,EAAzC;;AAEA,SAASG,GAAT,GAAe;EAAA;;EACb,MAAMC,IAAI,GAAGb,WAAW,CAAEc,KAAD,IAAsBA,KAAK,CAACC,GAAN,CAAUF,IAAjC,CAAxB,CADa,CAEb;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMG,KAAK,GAAGjB,KAAK,CAACkB,OAAN,CAAc,MAAMhB,WAAW,CAACG,eAAe,CAACS,IAAD,CAAhB,CAA/B,EAAwD,CAACA,IAAD,CAAxD,CAAd;EACA,oBACE,QAAC,aAAD;IAAe,KAAK,EAAEG,KAAtB;IAAA,uBACE,QAAC,mBAAD;MAAqB,KAAK,EAAEA,KAA5B;MAAA,wBACA,QAAC,WAAD;QAAA;QAAA;QAAA;MAAA,QADA,eAEA,QAAC,gBAAD;QAAkB,QAAQ,EAAE,CAA5B;QAAA,uBACE,QAAC,MAAD;UAAQ,OAAO,EAAEL,OAAjB;UAAA,UAA2BN,YAAY,CAACE,MAAD;QAAvC;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAFA;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;GA/BQK,G;UACMZ,W;;;KADNY,G;AAiCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}